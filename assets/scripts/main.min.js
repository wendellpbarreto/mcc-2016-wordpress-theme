$(function () {

	var $highlightsCarousel = $('section#highlights');
	$highlightsCarousel.owlCarousel({
		items: 1,
		lazyLoad: true,
		autoplay: true,
		loop: false,
		animateOut: 'fadeOut',
		animateIn: 'fadeIn',
		dots: true,
		nav: false,
		navClass: ['owl-prev', 'owl-next'],
		navText: ['<i class="fa fa-angle-left"></i>', '<i class="fa fa-angle-right"></i>'],
	});

	var galleriesFromPosts = $('.post .gallery');
	galleriesFromPosts.each(function () {
		var $gallery = $(this);
		// var items = $gallery.is('[class*="gallery-columns-"') ? $gallery.attr('class').match(/gallery-columns-(\d+)/)[1] : 1;
		$gallery.addClass('owl-carousel');
		$gallery.children(':not(.gallery-item)').remove();
		$gallery.find('.gallery-item .gallery-icon').each(function () {
			var imageURL = $(this).find('img').attr('src');
			$(this).append('<div class="blured-mask"></div>');
			$(this).append('<div class="fake-img"></div>');
			// $(this).css('background-image', 'url(' + imageURL + ')');
			$(this).find('.blured-mask').css('background-image', 'url(' + imageURL + ')');
			$(this).find('.fake-img').css('background-image', 'url(' + imageURL + ')');
		});
		$gallery.owlCarousel({
			// items: parseInt(items),
			items: 1,
			lazyLoad: true,
			loop: false,
			autoplay: true,
			animateOut: 'fadeOut',
			animateIn: 'fadeIn',
			nav: true,
			dots: false,
			margin: 5,
			navClass: ['owl-prev', 'owl-next'],
			// navText: ['', ''],
			navText: ['<i class="fa fa-angle-left"></i>', '<i class="fa fa-angle-right"></i>'],
			responsive: {
				0: {
					items: 1,
				},
				768: {
					// items: parseInt(items),
					items: 1,
				}
			}
		});
	});
})

scrollTo = function(target) {
    $('html, body').animate({ scrollTop: target.offset().top - 85 }, 1000);
};

$(document).foundation();

$(document).on('click', '[data-scroll-to]', function() {
    console.log("Clicked")
    scrollTo($($(this).attr('data-scroll-to')));
});

(function() {
    var clickable = {
        elements: document.querySelectorAll('[data-href]'),

        redirect_to: function(href, target) {
            target = target || "";
            clickable.simulate_anchor(href, target);
        },

        simulate_anchor: function(href, target) {
            var anchor = document.createElement("a");
            anchor.setAttribute('href', href);
            anchor.setAttribute('target', target);
            anchor.click();
        },

        init: function() {
            for (var i = 0; i < this.elements.length; i++) {
                var element = this.elements[i];
                element.style.cursor = 'pointer';
                element.addEventListener('click', function() {
                    clickable.redirect_to(
                        this.getAttribute('data-href'),
                        this.getAttribute('data-target')
                    );
                }, false);
            }
        }
    };

    clickable.init();
})();

;(function(window) {

    'use strict';

    var docElem = window.document.documentElement;

    function getViewportH() {
        var client = docElem['clientHeight'],
            inner = window['innerHeight'];

        if( client < inner )
            return inner;
        else
            return client;
    }

    function scrollY() {
        return window.pageYOffset || docElem.scrollTop;
    }

    // http://stackoverflow.com/a/5598797/989439
    function getOffset( el ) {
        var offsetTop = 0, offsetLeft = 0;
        do {
            if ( !isNaN( el.offsetTop ) ) {
                offsetTop += el.offsetTop;
            }
            if ( !isNaN( el.offsetLeft ) ) {
                offsetLeft += el.offsetLeft;
            }
        } while( el = el.offsetParent )

        return {
            top : offsetTop,
            left : offsetLeft
        }
    }

    function inViewport( el, h ) {
        var elH = el.offsetHeight,
            scrolled = scrollY(),
            viewed = scrolled + getViewportH(),
            elTop = getOffset(el).top,
            elBottom = elTop + elH,
            // if 0, the element is considered in the viewport as soon as it enters.
            // if 1, the element is considered in the viewport only when it's fully inside
            // value in percentage (1 >= h >= 0)
            h = h || 0;

        return (elTop + elH * h) <= viewed && (elBottom) >= scrolled;
    }

    function extend( a, b ) {
        for( var key in b ) {
            if( b.hasOwnProperty( key ) ) {
                a[key] = b[key];
            }
        }
        return a;
    }

    function cbpScroller( el, options ) {
        this.el = el;
        this.options = extend( this.defaults, options );
        this._init();
    }

    function hasClass(element, cls) {
        return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
    }

    cbpScroller.prototype = {
        defaults : {
            // The viewportFactor defines how much of the appearing item has to be visible in order to trigger the animation
            // if we'd use a value of 0, this would mean that it would add the animation class as soon as the item is in the viewport.
            // If we were to use the value of 1, the animation would only be triggered when we see all of the item in the viewport (100% of it)
            viewportFactor : 0.2
        },
        _init : function() {
            if( Modernizr.touch ) return;
            this.sections = Array.prototype.slice.call( this.el.querySelectorAll( '.animated' ) );
            this.didScroll = false;

            var self = this;

            var scrollHandler = function() {
                    if( !self.didScroll ) {
                        self.didScroll = true;
                        setTimeout( function() { self._scrollPage(); }, 60 );
                    }
                },
                resizeHandler = function() {
                    function delayed() {
                        self._scrollPage();
                        self.resizeTimeout = null;
                    }
                    if ( self.resizeTimeout ) {
                        clearTimeout( self.resizeTimeout );
                    }
                    self.resizeTimeout = setTimeout( delayed, 200 );
                };

            window.addEventListener( 'scroll', scrollHandler, false );
            window.addEventListener( 'resize', resizeHandler, false );
        },
        _scrollPage : function() {
            var self = this;

            this.sections.forEach( function( el, i ) {
                if( inViewport( el, self.options.viewportFactor ) ) {
                    classie.add( el, 'appeared' );

                    if (hasClass(el, 'fade-in-left')) {
                        classie.add(el, 'fadeInLeft');
                    } else if (hasClass(el, 'fade-in-right')) {
                        classie.add(el, 'fadeInRight');
                    } else if (hasClass(el, 'fade-in-up')) {
                        classie.add(el, 'fadeInUp');
                    } else if (hasClass(el, 'fade-in')) {
                        classie.add(el, 'fadeIn');
                    } else if (hasClass(el, 'fade-in-down')) {
                        classie.add(el, 'fadeInDown');
                    }
                }
            });
            this.didScroll = false;
        }
    }

    // add to global namespace
    window.cbpScroller = cbpScroller;

})(window);

maps = function() {
	var init, render;

	render = function() {
		var map, marker, myOptions, style;
		style = [
		{
			"stylers": [
			{
				"saturation": -100
			}, {
				"gamma": 0.8
			}, {
				"lightness": 4
			}, {
				"visibility": "on"
			}
			]
		}, {
			"featureType": "landscape.natural",
			"stylers": [
			{
				"visibility": "on"
			}, {
				"color": "#5dff00"
			}, {
				"gamma": 4.97
			}, {
				"lightness": -5
			}, {
				"saturation": 100
			}
			]
		}
		];
		myOptions = {
			zoom: 18,
			center: new google.maps.LatLng(-5.803316,-35.20184),
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			styles: style,
			mapTypeControl: false,
			streetViewControl: false,
			scrollwheel: false,
			navigationControl: false,
			scaleControl: false,
			overviewMapControl: false,
			panControl: true,
			zoomControl: true,
			zoomControlOptions: {
				style: google.maps.ZoomControlStyle.LARGE
			}
		};
		if (document.getElementById('map')) {
			map = new google.maps.Map(document.getElementById('map'), myOptions);

			marker1 = new google.maps.Marker({
				position: new google.maps.LatLng(-5.803316,-35.20184),
				map: map,
				icon: ''
			});

			// var infowindow1 = new google.maps.InfoWindow({
			// 	content: '<div id="content" class="map__info">'+
			// 	'<h4 class="map__title">Cinema da Fundaj</h4>'+
			// 	'<div id="bodyContent">'+
			// 	'<p class="map__address"><b>Rua Henrique Dias, 609 - Derby - Recife/PE</b></p>' +
			// 	'</div>'+
			// 	'</div>'
			// });

			// google.maps.event.addListener(marker1, 'mouseover', function() {
			// 	infowindow1.open(map, marker1);
			// });
		}
	};
	init = function() {
		if (document.getElementById('map')) {
			return render();
		}
	};
	return {
		init: init
	};
};

$(document).ready(function(){
	var map = maps();
	map.init();
});

$(function() {
	$(document).on('click', '[data-toggle=modal]', function(event) {
		event.preventDefault();

		var $this = $(this);
		var $target = $($this.attr('data-target'));

		if ($target.length) {
			$target.show();
		}
	});

	$(document).on('click', '.close-modal', function(event) {
		event.preventDefault();

		var $this = $(this);
		var $target = $this.closest('.modal');

		if ($target.length) {
			$target.hide();
		}
	});
});

function scrollHandler() {
  var scrollTop = $(window).scrollTop();

  var topbar = $('#topbar');
  var topbarHeight = topbar.outerHeight();

	if (scrollTop > topbarHeight) {
		classie.add(topbar[0], 'fixed-topbar');
	} else {
		classie.remove(topbar[0], 'fixed-topbar');
	}
}

// $(window).scroll(scrollHandler);

$('#topbar .topbar__nav a[data-drop]')
	.mouseenter(function() {
		var dropdown = $(this).attr('data-drop');
		// $('.' + dropdown).closest('.dropdown--wrap').show();
		$('.' + dropdown).closest('.dropdown--wrap').addClass('show');
	})
	.mouseleave(function() {
		var dropdown = $(this).attr('data-drop');
		// $('.' + dropdown).closest('.dropdown--wrap').hide();
		$('.' + dropdown).closest('.dropdown--wrap').removeClass('show');
	})
//# sourceMappingURL=data:application/json;charset=utf8;base64,
